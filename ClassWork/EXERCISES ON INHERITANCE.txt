EXERCISES ON INHERITANCE
=========================
Scenario 1: Stock Trading System Enhancement
Requirements:

    Create an interface class Stock with stricter conditions:
        Attributes:
            symbol (must be a non-empty string of 3-5 uppercase letters).
            price (must be a positive decimal value, cannot be zero).
            volume (must be an integer â‰¥ 0).
            exchangeName (must be one of: "NYSE", "NASDAQ", "LSE").
        Abstract methods:
            calculateMarketValue(): Should throw an exception if price or volume is zero.
            updatePrice(double percentageChange): Ensures price never becomes negative.
            getStockType(): Returns the specific stock type.

    Create subclasses TechStock and DividendStock:
        TechStock: Adds an innovationIndex (integer 0-100). If < 30, price drops faster.
        DividendStock: Adds dividendYield (must be a percentage between 0 and 15%).

    Trading System Implementation:
        buyShares(int qty):
            If quantity is â‰¤ 0, throw InvalidTransactionException.
            Updates volume and increases price by 1% per 100 shares.
        sellShares(int qty):
            Ensures enough volume exists before selling.
            If volume after sale is below 10% of the original, price drops significantly.

    Polymorphic Processing & Exception Handling:
        Maintain a List<Stock> where different stock types are handled dynamically.
        Throw InsufficientSharesException if selling more shares than owned

=============================
Scenario 2: Multi-Bank System with Strict Banking Rules

Requirements:

    Create an interface Transaction with stricter validations:
        deposit(double amount):
            Must be positive. If amount > $10,000, report to "FinancialRegulator".
        withdraw(double amount):
            Checks for balance and daily limits. Throws DailyLimitExceededException.
        transfer(BankAccount to, double amount):
            Ensures both accounts belong to different banks.

    Create an interface class BankAccount:
        Attributes:
            accountNumber (10-digit number, unique).
            balance (cannot be negative).
            bankName (from a predefined list).
            interestRate (0-10%).
        Abstract method:
            calculateMonthlyInterest(): Ensures no interest is given on balances < $100.

    Create subclasses SavingsAccount and FixedDepositAccount:
        SavingsAccount:
            Minimum balance of $500.
            Withdrawals below $500 incur a 2% penalty.
        FixedDepositAccount:
            No withdrawals before maturity.
            Early withdrawal triggers EarlyWithdrawalPenaltyException.

    Transaction Processing with Exception Handling:
        Use BankTransactionProcessor to handle a list of bank accounts polymorphically.
        Implement InsufficientFundsException for overdraft prevention.
=======================================================
Scenario 3: Advanced School Management System

Requirements:

    Create an interface Person with stricter rules:
        getDetails(): Must include name, role, and ID.
        getRole(): Must return a predefined role ("Student", "Teacher", "Administrator").

    Create an interface class SchoolMember:
        Attributes:
            name (must be non-empty).
            age (must be â‰¥ 5).
            idNumber (unique, follows "SCH-XXXXX" format).
        Abstract method:
            getResponsibilities(): Must list at least two responsibilities.

    Create subclasses Student, Teacher, and Administrator:
        Student:
            Tracks grade (1-12), subjects, and calculateGPA().
            GPA should be between 0.0 and 4.0.
        Teacher:
            Tracks subjectTaught, salary (must be positive), and teach().
        Administrator:
            Tracks department, manages approveBudget(double amount).
            Cannot approve a budget over $1,000,000 without Board approval.

    Polymorphic Role Printing with Validation:
        printAllRoles():
            Uses a list of SchoolMember objects to print dynamically.
            Throws InvalidRoleException for unknown roles.

===========================
Scenario 4: HR Salary Payment and Payroll Management System
ðŸ”¹ Requirements:

You are designing an HR payroll system to manage employee salaries, bonuses, deductions, and tax calculations.
 Create an interface PayrollOperations with the following methods:

    calculateSalary():
        Computes net salary based on base salary, tax deductions, and bonuses.
    applyBonus(double amount):
        Can only be applied if the employee meets performance criteria.
    deductAmount(double amount, String reason):
        Cannot reduce net salary below minimum wage.
    generatePayslip():
        Returns a detailed payslip with earnings, deductions, and net pay.

 Create an interface class Employee that implements PayrollOperations:

    Attributes:
        employeeID (Unique, follows "EMP-XXXXX" format).
        name (Non-empty string).
        age (â‰¥ 18).
        baseSalary (â‰¥ minimum wage).
        taxRate (0-30%).
        employmentType (Must be "Full-Time", "Part-Time", or "Contract").
    Abstract method:
        getWorkDetails(): Describes job responsibilities and working hours.

Create subclasses FullTimeEmployee, PartTimeEmployee, and ContractEmployee:

    FullTimeEmployee:
        Earns a fixed monthly salary.
        Eligible for performance-based bonuses.
        Can apply for paid leave (max 30 days per year).
    PartTimeEmployee:
        Paid per hour worked.
        Cannot work more than 30 hours/week.
        No paid leave benefits.
    ContractEmployee:
        Hired for a fixed contract duration (e.g., 6 months, 1 year).
        No bonuses but receives a contract-end payout.
        Cannot terminate before end date unless contract specifies.

 Implement HRPayrollSystem to process salary payments dynamically:

    Uses a list of Employee objects to process payroll.
    Implements polymorphic salary calculation based on employment type.
    Generates payslips and stores them as PDF or text files.

 Exception Handling:

    InvalidSalaryException: If salary falls below minimum wage.
    OvertimeLimitException: If part-time employees exceed 30 hours/week.
    ContractViolationException: If a contract employee tries to resign early.
    TaxCalcuation
=================================
senaio 5: Create an Interface AcademicOperations with the following methods:

    enrollStudent(Student student, Course course):
        A student cannot enroll in more than 6 courses per semester.
        A course cannot have more than 50 students.
    assignGrade(Student student, Course course, double marks):
        Marks must be between 0 and 100.
        If marks < 40, automatically assign "Fail" status.
    scheduleLecture(Course course, String dateTime, String topic):
        Cannot schedule lectures on weekends.
        Lecture duration must be between 1 and 3 hours.
    generateReportCard(Student student):
        Calculates GPA based on marks and credit hours.

Create an Abstract Class SchoolMember that Implements AcademicOperations:
Attributes:

    name (Non-empty string).
    age (â‰¥ 5).
    idNumber (Unique, follows "SCH-XXXXX" format).
    Abstract Method:
        getRole(): Returns "Student", "Teacher", or "Administrator".
Create Subclasses Student, Teacher, and Administrator:
Student (Extends SchoolMember)

    Attributes:
        gradeLevel (1-12).
        coursesEnrolled (Max 6).
        marks (Stores marks per course).
    Methods:
        calculateGPA(): Uses a weighted average formula based on credit hours.
        Validation:
            Cannot enroll if already in 6 courses.

 Teacher (Extends SchoolMember)

    Attributes:
        subjectTaught.
        salary (Must be â‰¥ minimum wage).
        assignedCourses (A teacher can handle up to 5 courses).
    Methods:
        teachLecture(Course course): Ensures course exists before teaching.
        approveGrade(Student student, double marks):
            Grades must be approved within 7 days after an exam.

 Administrator (Extends SchoolMember)

    Attributes:
        department.
    Methods:
        approveCourse(Course course): Ensures course syllabus is complete before approval.
        generateSchoolReport(): Provides pass/fail ratio and top performers.

 Create Classes Course and Lecture for Academic Structure:
 Course Class

    Attributes:
        courseCode (Unique, follows "CSE-XXX" format).
        courseName (Non-empty).
        creditHours (Between 2 and 5).
        studentsEnrolled (Max 50 students per course).
    Methods:
        addStudent(Student student): Ensures course capacity is not exceeded.
        calculateAverageMarks(): Computes class average based on student marks.

 Lecture Class

    Attributes:
        lectureID (Unique).
        course (Linked to Course).
        dateTime (Ensures weekday scheduling).
        duration (1-3 hours).
    Methods:
        recordAttendance(Student student): Fails if student is not enrolled.

Implement SchoolSystem to Handle Academic Operations Dynamically:

    Maintains lists of Students, Teachers, Courses, and Lectures.
    Implements polymorphic behavior for different school members.
    Stores academic records in files (CSV or JSON format).

 Exception Handling:

    CourseFullException: If a student tries to enroll in a full course.
    InvalidMarksException: If marks are out of range (0-100).
    UnauthorizedGradeApprovalException: If a teacher approves grades after 7 days.
    LectureSchedulingException: If a lecture is scheduled on a weekend.
    CourseApprovalException: If a course is missing syllabus content.
